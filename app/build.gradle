apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'io.sentry.android.gradle'


def apikeyPropertiesFile = rootProject.file("app.props")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    compileSdkVersion 28
    testOptions.unitTests.includeAndroidResources = true
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    if (apikeyPropertiesFile.canRead()) {

        def code = apikeyProperties['VERSION_CODE'].toInteger() + 1

        apikeyProperties['VERSION_CODE'] = code.toString()
        apikeyProperties.store(apikeyPropertiesFile.newWriter(), null)

        defaultConfig {
            applicationId "pw.dvd604.music"
            minSdkVersion 26
            targetSdkVersion 28
            versionCode code
            versionName "3.0"
            testInstrumentationRunner "android.support.MediaService.runner.AndroidJUnitRunner"
            buildConfigField("String", "sentryKey", apikeyProperties['sentryKey'])
            buildConfigField("String", "apiURL", apikeyProperties['apiURL'])
            buildConfigField("String", "defaultURL", apikeyProperties['defaultURL'])
            buildConfigField("int", "siteID", apikeyProperties['siteID'])
            buildConfigField("String", "versionURL", apikeyProperties['versionURL'])
            buildConfigField("String", "versionURLRoot", apikeyProperties['versionURLRoot'])
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

sentry {
    // Disables or enables the automatic configuration of proguard
    // for Sentry.  This injects a default config for proguard so
    // you don't need to do it manually.
    autoProguardConfig true

    // Enables or disables the automatic upload of mapping files
    // during a build.  If you disable this you'll need to manually
    // upload the mapping files with sentry-cli when you do a release.
    autoUpload true
}

dependencies {
    repositories {
        mavenCentral()
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'androidx.core:core:1.0.2'
    testImplementation 'junit:junit:4.12'

    implementation 'com.sothree.slidinguppanel:library:3.4.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.media:media:1.0.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1"

    implementation 'io.sentry:sentry-android:1.7.27'
    implementation 'org.slf4j:slf4j-nop:1.7.25'

    implementation 'org.matomo.sdk:tracker:4.1.0'

    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // Optional -- Robolectric environment
    testImplementation "org.robolectric:robolectric:4.3"
    testImplementation 'androidx.test:core:1.2.0'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'
}
